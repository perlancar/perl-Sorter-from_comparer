package Sorter::from_comparer;

use 5.010001;
use strict 'subs', 'vars';
use warnings;

# AUTHORITY
# DATE
# DIST
# VERSION

sub meta {
    return +{
        v => 1,
        args => {
            comparer => {schema=>'perl::comparer::modname_with_optional_args*', req=>1},
            reverse => {schema=>'bool*'},
        },
    };
}

sub gen_sorter {
    my %args = @_;

    my $comparer = $args{comparer} or die "Please specify comparer";
    my $reverse = $args{reverse};

    require Module::Load::Util;

    my ($mod, $args) = Module::Load::Util::_normalize_module_with_optional_args($comparer);
    $mod = Module::Load::Util::_load_module({ns_prefix=>"Comparer"}, $mod);
    my $cmp = &{"$mod\::gen_comparer"}(@$args);

    sub {
        sort { $reverse ? $cmp->($b,$a) : $cmp->($a,$b) } @_;
    };
}

1;
# ABSTRACT: Sort by comparer generated by a Comparer:: module

=for Pod::Coverage ^(meta|gen_sorter)$

=head1 SYNOPSIS

 use Sorter::from_comparer;

 my $sorter = Sorter::from_comparer::gen_sorter(comparer => "similarity=string,foo");
 my @sorted = $sorter->("food", "foolish", "foo", "bar");
 # => ("foo","food","bar","foolish")


=head1 DESCRIPTION


=head1 SEE ALSO

L<Comparer>

=cut
